AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cognito user pool with mfa enabled

Parameters:
  # AppName:
  #   Type: String
  #   Description: Name of the application
  StageName:
    Type: String
    Default: dev
  ProjectName:
    Type: String
    Description: 'Name of the project'
    Default: 'cognito-mfa'

Resources:
        # ///---------------User Pool-----------------/// 
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${ProjectName}-${StageName}-UserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 6
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
      # MfaConfiguration: "ON"OPTIONAL
      MfaConfiguration: "OPTIONAL"
      EnabledMfas:
        - SOFTWARE_TOKEN_MFA

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${ProjectName}-${StageName}-UserPoolClient
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      # CallbackURLs: !Ref ClientDomains
      # LogoutURLs: !Ref ClientDomains
      # AllowedOAuthFlowsUserPoolClient: true
      # AllowedOAuthFlows:
      #   - code
      #   - implicit
        # - client_credentials
      # AllowedOAuthScopes:
      #   - email
      #   - openid
      #   - profile
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH

  # UserPoolDomain:
  #   Type: AWS::Cognito::UserPoolDomain
  #   Properties: 
  #     Domain: !Sub sam-mfa-${StageName}-domain
  #     UserPoolId: !Ref UserPool

  UserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties: 
      GroupName: Users
      Description: User Group
      Precedence: 0
      UserPoolId: !Ref UserPool

        # ///---------------Roles and Policies-----------------/// 
  CognitoRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
                - 'mediaconvert.amazonaws.com'
                - 'cloudfront.amazonaws.com'
                - !Sub "states.${AWS::Region}.amazonaws.com"
                - 'mediapackage.amazonaws.com'
                - 'rds.amazonaws.com'
                - 'secretsmanager.amazonaws.com'
                - 'dax.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "cloudwatch:*"
                  - "cognito-identity:*"
                  - "cognito-idp:*"
                  - "cognito-sync:*"
                  - "dynamodb:*"
                Resource: '*'

  # S3BucketAccessRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - 'lambda.amazonaws.com'
  #               - 'mediaconvert.amazonaws.com'
  #               - 'cloudfront.amazonaws.com'
  #               - !Sub "states.${AWS::Region}.amazonaws.com"
  #               - 'mediapackage.amazonaws.com'
  #               - 'rds.amazonaws.com'
  #               - 'secretsmanager.amazonaws.com'
  #               - 'dax.amazonaws.com'
  #           Action: 
  #             - 'sts:AssumeRole'
  #     Policies:
  #       - PolicyName: root
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action: 
  #                 - "s3:*"
  #               Resource: '*'
  
        # ///---------------API's-----------------/// 
  DefaultApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Sub ${StageName}
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'*'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'*'"
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      # Authorizers:
      #     CognitoAuthorizer:
      #       UserPoolArn: !GetAtt UserPool.Arn

        # ///---------------Lambda Functions-----------------/// 
  SignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 5
      Handler: sign_up.lambda_handler
      Runtime: python3.11
      CodeUri: src/
      Environment:
        Variables:
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient         
      Role: !GetAtt CognitoRole.Arn
      Events:
        SignUp:
          Type: Api
          Properties:
            Path:  /signup
            Method: post
            RestApiId: !Ref DefaultApi
            # Auth:
            #   Authorizer: NONE

  AddMfaDeviceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 5
      Handler: add_mfa_device.lambda_handler
      Runtime: python3.11
      CodeUri: src/
      Environment:
        Variables:
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient
      Role: !GetAtt CognitoRole.Arn
      Events:
        Login:
          Type: Api
          Properties:
            Path:  /add_mfa_device
            Method: post
            RestApiId: !Ref DefaultApi
            # Auth:
            #   Authorizer: NONE

  MfaCodeVerifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 5
      Handler: mfa_code_verify.lambda_handler
      Runtime: python3.11
      CodeUri: src/
      Environment:
        Variables:
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient
      Role: !GetAtt CognitoRole.Arn
      Events:
        Login:
          Type: Api
          Properties:
            Path:  /mfa_code_verify
            Method: post
            RestApiId: !Ref DefaultApi
            # Auth:
            #   Authorizer: NONE

  LoginWithMfaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 5
      Handler: mfa_login.lambda_handler
      Runtime: python3.11
      CodeUri: src/
      Environment:
        Variables:
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient
          COGNITO_USERPOOL_ID: !Ref UserPool
      Role: !GetAtt CognitoRole.Arn
      Events:
        Login:
          Type: Api
          Properties:
            Path:  /mfa_login
            Method: post
            RestApiId: !Ref DefaultApi
            # Auth:
            #   Authorizer: NONE

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 5
      Handler: login.lambda_handler
      Runtime: python3.11
      CodeUri: src/
      Environment:
        Variables:
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient
          COGNITO_USERPOOL_ID: !Ref UserPool
      Role: !GetAtt CognitoRole.Arn
      Events:
        Login:
          Type: Api
          Properties:
            Path:  /login
            Method: post
            RestApiId: !Ref DefaultApi

  AddMfaPreferenceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 5
      Handler: add_mfa_preference.lambda_handler
      Runtime: python3.11
      CodeUri: src/
      Environment:
        Variables:
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient
          COGNITO_USERPOOL_ID: !Ref UserPool
      Role: !GetAtt CognitoRole.Arn
      Events:
        Login:
          Type: Api
          Properties:
            Path:  /mfa_preference
            Method: post
            RestApiId: !Ref DefaultApi

  ValidateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 5
      Handler: validate.lambda_handler
      Runtime: python3.8
      CodeUri: src/
      Environment:
        Variables:
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient
      Role: !GetAtt CognitoRole.Arn
      Events:
        ConfirmSignUp:
          Type: Api
          Properties:
            Path:  /confirm_signup
            Method: post
            RestApiId: !Ref DefaultApi

  ReValidateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 5
      Handler: re_validate.lambda_handler
      Runtime: python3.8
      CodeUri: src/
      Environment:
        Variables:
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient
      Role: !GetAtt CognitoRole.Arn
      Events:
        ConfirmSignUp:
          Type: Api
          Properties:
            Path:  /resend_confirm_code
            Method: post
            RestApiId: !Ref DefaultApi

  ForgotPwdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 5
      Handler: forgot_pwd.lambda_handler
      Runtime: python3.8
      CodeUri: src/
      Environment:
        Variables:
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient         
      Role: !GetAtt CognitoRole.Arn
      Events:
        SignUp:
          Type: Api
          Properties:
            Path:  /forgot_password
            Method: post
            RestApiId: !Ref DefaultApi

  ConfirmForgotPwdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 5
      Handler: confirm_Fpwd.lambda_handler
      Runtime: python3.8
      CodeUri: src/
      Environment:
        Variables:
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient
      Role: !GetAtt CognitoRole.Arn
      Events:
        ConfirmSignUp:
          Type: Api
          Properties:
            Path:  /confirm_forgot_pwd
            Method: post
            RestApiId: !Ref DefaultApi

        # ///---------------Bucket-----------------/// 
  # S3Bucket:
  #   Type: 'AWS::S3::Bucket'
  #   Properties:
  #     BucketName: sll-storage-bucket
  #     CorsConfiguration:
  #       CorsRules:
  #         - AllowedHeaders: 
  #             - '*'
  #           AllowedOrigins: 
  #             - '*'
  #           AllowedMethods:
  #             - PUT
  #             - POST 
  #             - DELETE
  #             - GET
  #           AllowedOrigins: 
  #             - '*'
  #           ExposedHeaders:
  #             - ETag
  #             - x-amz-meta-custom-header

Outputs:

  UserPoolId:
    Description: "User pool ID"
    Value: !Ref UserPool
    Export:
      Name: !Sub ${ProjectName}:UserPoolId

  UserPoolClientId:
    Description: "Application client ID"
    Value: !Ref UserPoolClient

  SignupFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for Signup function"
    Value: !Sub "https://${DefaultApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/signup/"

  LoginFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for Login function"
    Value: !Sub "https://${DefaultApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/login/"
  
